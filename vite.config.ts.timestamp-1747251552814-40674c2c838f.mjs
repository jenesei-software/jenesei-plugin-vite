// vite.config.ts
import path, { resolve as resolve2 } from "path";
import { defineConfig } from "file:///W:/git-library/jenesei-software/jenesei-plugin-vite/node_modules/vite/dist/node/index.js";
import dts from "file:///W:/git-library/jenesei-software/jenesei-plugin-vite/node_modules/vite-plugin-dts/dist/index.mjs";
import tsconfigPaths from "file:///W:/git-library/jenesei-software/jenesei-plugin-vite/node_modules/vite-tsconfig-paths/dist/index.js";

// package.json
var peerDependencies = {
  sharp: "^0.33.5"
};

// src/plugins/update-readme-peer-dependencies.ts
import fs from "fs";
import { resolve } from "path";
var __vite_injected_original_dirname = "W:\\git-library\\jenesei-software\\jenesei-plugin-vite\\src\\plugins";
function pluginUpdateReadmePD(props) {
  return {
    name: "plugin-update-readme-peer-dependencies",
    buildStart() {
      const packageJsonPath = resolve(__vite_injected_original_dirname, "package.json");
      const readmePath = resolve(__vite_injected_original_dirname, "README.md");
      async function updateReadme() {
        const packageJson = JSON.parse(await fs.promises.readFile(packageJsonPath, "utf8"));
        const peerDependencies2 = packageJson.peerDependencies || {};
        const commands = Object.keys(peerDependencies2).map((dep) => `npm install ${dep} --save`).join("\n");
        const installSection = `
### Installing dependencies

To work correctly you need to install the following dependencies:

\`\`\`bash
${commands}
\`\`\`
`;
        const readmeContent = await fs.promises.readFile(readmePath, "utf8");
        const insertionPoint = props.insertionPoint;
        if (readmeContent.includes(insertionPoint)) {
          const insertionIndex = readmeContent.indexOf(insertionPoint) + insertionPoint.length;
          const beforeInsertion = readmeContent.slice(0, insertionIndex).trim();
          const newContent = beforeInsertion + "\n\n" + installSection;
          await fs.promises.writeFile(readmePath, newContent, "utf8");
          console.log(
            "\x1B[32minfo\x1B[0m => UpdateReadmePeerDependencies: README updated with dependency install command."
          );
        } else {
          console.log(
            "\x1B[33mwarn\x1B[0m => UpdateReadmePeerDependencies: Could not find section to insert into README."
          );
        }
      }
      updateReadme().catch(console.error);
    }
  };
}

// vite.config.ts
var __vite_injected_original_dirname2 = "W:\\git-library\\jenesei-software\\jenesei-plugin-vite";
var vite_config_default = defineConfig(() => {
  return {
    resolve: {
      alias: {
        "@local": path.resolve(__vite_injected_original_dirname2, "./src")
      }
    },
    plugins: [
      pluginUpdateReadmePD({ insertionPoint: "## Peer Dependencies" }),
      tsconfigPaths(),
      dts({
        include: ["src/"],
        exclude: [],
        rollupTypes: true,
        insertTypesEntry: true,
        tsconfigPath: "./tsconfig.json"
      })
    ],
    publicDir: false,
    build: {
      sourcemap: true,
      outDir: "./build",
      rootDir: "./src",
      minify: "terser",
      terserOptions: {
        compress: {
          // drop_console: true,
          // drop_debugger: true
        }
      },
      lib: {
        entry: {
          ["main"]: resolve2(__vite_injected_original_dirname2, "src/main.ts")
        },
        formats: ["es", "cjs"],
        fileName: (format, name) => `${name}.${format}.js`
      },
      rollupOptions: {
        external: Object.keys(peerDependencies),
        output: {
          globals: {}
        }
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
